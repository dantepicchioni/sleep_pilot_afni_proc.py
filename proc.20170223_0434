#!/bin/tcsh -xef

echo "auto-generated by afni_proc.py, Wed May 26 10:19:21 2021"
echo "(version 7.16, May 19, 2021)"
echo "execution started: `date`"

# to execute via tcsh: 
#   tcsh -xef proc.20170223_0434 |& tee output.proc.20170223_0434
# to execute via bash: 
#   tcsh -xef proc.20170223_0434 2>&1 | tee output.proc.20170223_0434

# =========================== auto block: setup ============================
# script setup

# take note of the AFNI version
afni -ver

# check that the current AFNI version is recent enough
afni_history -check_date 27 Jun 2019
if ( $status ) then
    echo "** this script requires newer AFNI binaries (than 27 Jun 2019)"
    echo "   (consider: @update.afni.binaries -defaults)"
    exit
endif

# the user may specify a single subject to run with
if ( $#argv > 0 ) then
    set subj = $argv[1]
else
    set subj = 20170223_0434
endif

# assign output directory name
set output_dir = $subj.results

# verify that the results directory does not yet exist
if ( -d $output_dir ) then
    echo output dir "$subj.results" already exists
    exit
endif

# set list of runs
set runs = (`count -digits 2 1 1`)

# create results and stimuli directories
mkdir $output_dir
mkdir $output_dir/stimuli

# copy anatomy to results dir
3dcopy anat_warp/anatSS.20170223_0434.nii $output_dir/anatSS.20170223_0434

# copy external censor file into results dir
cp RicRegs_censor.1D $output_dir

# copy external -tlrc_NL_warped_dsets datasets
3dcopy anat_warp/anatQQ.20170223_0434.nii $output_dir/anatQQ.20170223_0434
3dcopy anat_warp/anatQQ.20170223_0434.aff12.1D \
    $output_dir/anatQQ.20170223_0434.aff12.1D
3dcopy anat_warp/anatQQ.20170223_0434_WARP.nii \
    $output_dir/anatQQ.20170223_0434_WARP.nii

# copy slice-based regressors for RETROICOR (rm first 0 TRs)
1dcat RicRegs.1D > $output_dir/stimuli/ricor_orig_r01.1D

# ============================ auto block: tcat ============================
# apply 3dTcat to copy input dsets to results dir,
# while removing the first 0 TRs
3dTcat -prefix $output_dir/pb00.$subj.r01.tcat Epi.nii'[0..$]'

# and make note of repetitions (TRs) per run
set tr_counts = ( 2538 )

# -------------------------------------------------------
# enter the results directory (can begin processing data)
cd $output_dir


# ========================== auto block: outcount ==========================
# data check: compute outlier fraction for each volume
touch out.pre_ss_warn.txt
foreach run ( $runs )
    3dToutcount -automask -fraction -polort 51 -legendre                    \
                pb00.$subj.r$run.tcat+orig > outcount.r$run.1D

    # censor outlier TRs per run, ignoring the first 0 TRs
    # - censor when more than 0.05 of automask voxels are outliers
    # - step() defines which TRs to remove via censoring
    1deval -a outcount.r$run.1D -expr "1-step(a-0.05)" > rm.out.cen.r$run.1D

    # outliers at TR 0 might suggest pre-steady state TRs
    if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
        echo "** TR #0 outliers: possible pre-steady state TRs in run $run" \
            >> out.pre_ss_warn.txt
    endif
end

# catenate outlier counts into a single time series
cat outcount.r*.1D > outcount_rall.1D

# catenate outlier censor files into a single time series
cat rm.out.cen.r*.1D > outcount_${subj}_censor.1D
# combine multiple censor files
1deval -a outcount_${subj}_censor.1D -b RicRegs_censor.1D                   \
       -expr "a*b" > censor_${subj}_combined_2.1D

# get run number and TR index for minimum outlier volume
set minindex = `3dTstat -argmin -prefix - outcount_rall.1D\'`
set ovals = ( `1d_tool.py -set_run_lengths $tr_counts                       \
                          -index_to_run_tr $minindex` )
# save run and TR indices for extraction of vr_base_min_outlier
set minoutrun = $ovals[1]
set minouttr  = $ovals[2]
echo "min outlier: run $minoutrun, TR $minouttr" | tee out.min_outlier.txt

# ================================ despike =================================
# apply 3dDespike to each run
foreach run ( $runs )
    3dDespike -NEW -nomask -prefix pb01.$subj.r$run.despike \
        pb00.$subj.r$run.tcat+orig
end

# ================================= ricor ==================================
# RETROICOR - remove cardiac and respiratory signals
#           - per run: each run uses separate regressors
foreach run ( $runs )
    # detrend regressors (make orthogonal to poly baseline)
    3dDetrend -polort 102 -prefix rm.ricor.$run.1D                \
              stimuli/ricor_orig_r$run.1D\'

    1dtranspose rm.ricor.$run.1D stimuli/ricor_det_r$run.1D

    # pad slice0 regressors across all runs (for 'regress' block)
    1d_tool.py -infile stimuli/ricor_det_r$run.1D'[0..199]'       \
               -set_run_lengths $tr_counts                        \
               -pad_into_many_runs $run $#runs                    \
               -write rm.ricor_s0_r$run.1D

    # create (polort) X-matrix to apply in 3dREMLfit
    3dDeconvolve -polort 102 -input pb01.$subj.r$run.despike+orig \
        -x1D_stop -x1D pb02.ricor.r$run.xmat.1D

    # regress out the detrended RETROICOR regressors
    3dREMLfit -input pb01.$subj.r$run.despike+orig                \
        -matrix pb02.ricor.r$run.xmat.1D                          \
        -Obeta rm.pb02.ricor.betas.r$run                          \
        -Oerrts rm.pb02.ricor.errts.r$run                         \
        -slibase_sm stimuli/ricor_det_r$run.1D

    # re-create polynomial baseline
    3dSynthesize -matrix pb02.ricor.r$run.xmat.1D                 \
        -cbucket rm.pb02.ricor.betas.r$run+orig'[0..102]'         \
        -select polort -prefix rm.pb02.ricor.polort.r$run

    # final result: add REML errts to polynomial baseline
    3dcalc -a rm.pb02.ricor.errts.r$run+orig                      \
           -b rm.pb02.ricor.polort.r$run+orig                     \
          -datum short -nscale                                    \
           -expr a+b -prefix pb02.$subj.r$run.ricor
end

# put ricor regressors into a single file for 'regress' block
1dcat rm.ricor_s0_r[0-9]*.1D > stimuli/ricor_s0_rall.1D

# ================================= tshift =================================
# time shift data so all slice timing is the same 
foreach run ( $runs )
    3dTshift -tzero 1.5 -quintic -prefix pb03.$subj.r$run.tshift \
             -tpattern alt+z2                                    \
             pb02.$subj.r$run.ricor+orig
end

# --------------------------------
# extract volreg registration base
3dbucket -prefix vr_base_min_outlier                             \
    pb03.$subj.r$minoutrun.tshift+orig"[$minouttr]"

# ================================= align ==================================
# for e2a: compute anat alignment transformation to EPI registration base
# (new anat will be current anatSS.20170223_0434+orig)
# run uniformity correction on EPI base
3dUnifize -T2 -input vr_base_min_outlier+orig -prefix vr_base_min_outlier_unif

align_epi_anat.py -anat2epi -anat anatSS.20170223_0434+orig   \
       -suffix _al_junk                                       \
       -epi vr_base_min_outlier_unif+orig -epi_base 0         \
       -epi_strip 3dAutomask                                  \
       -anat_has_skull no                                     \
       -cost lpc+ZZ -ginormous_move -deoblique on -check_flip \
       -volreg off -tshift off

# ================================== tlrc ==================================

# nothing to do: have external -tlrc_NL_warped_dsets

# warped anat     : anatQQ.20170223_0434+tlrc
# affine xform    : anatQQ.20170223_0434.aff12.1D
# non-linear warp : anatQQ.20170223_0434_WARP.nii

# ================================= volreg =================================
# align each dset to base volume, to anat, warp to tlrc space

# verify that we have a +tlrc warp dataset
if ( ! -f anatQQ.20170223_0434+tlrc.HEAD ) then
    echo "** missing +tlrc warp dataset: anatQQ.20170223_0434+tlrc.HEAD" 
    exit
endif

# register and warp
foreach run ( $runs )
    # register each volume to the base image
    3dvolreg -verbose -zpad 2 -base vr_base_min_outlier+orig              \
             -1Dfile dfile.r$run.1D -prefix rm.epi.volreg.r$run           \
             -cubic                                                       \
             -1Dmatrix_save mat.r$run.vr.aff12.1D                         \
             pb03.$subj.r$run.tshift+orig

    # catenate volreg/epi2anat/tlrc xforms
    cat_matvec -ONELINE                                                   \
               anatQQ.20170223_0434.aff12.1D                              \
               anatSS.20170223_0434_al_junk_mat.aff12.1D -I               \
               mat.r$run.vr.aff12.1D > mat.r$run.warp.aff12.1D

    # apply catenated xform: volreg/epi2anat/tlrc/NLtlrc
    # then apply non-linear standard-space warp
    3dNwarpApply -master anatQQ.20170223_0434+tlrc -dxyz 2                \
                 -source pb03.$subj.r$run.tshift+orig                     \
                 -nwarp "anatQQ.20170223_0434_WARP.nii                    \
                 mat.r$run.warp.aff12.1D"                                 \
                 -prefix pb04.$subj.r$run.volreg
end

# make a single file of registration params
cat dfile.r*.1D > dfile_rall.1D

# warp the volreg base EPI dataset to make a final version
cat_matvec -ONELINE                                                       \
           anatQQ.20170223_0434.aff12.1D                                  \
           anatSS.20170223_0434_al_junk_mat.aff12.1D -I  >                \
           mat.basewarp.aff12.1D

3dNwarpApply -master anatQQ.20170223_0434+tlrc -dxyz 2                    \
             -source vr_base_min_outlier+orig                             \
             -nwarp "anatQQ.20170223_0434_WARP.nii mat.basewarp.aff12.1D" \
             -prefix final_epi_vr_base_min_outlier

# create an anat_final dataset, aligned with stats
3dcopy anatQQ.20170223_0434+tlrc anat_final.$subj

# record final registration costs
3dAllineate -base final_epi_vr_base_min_outlier+tlrc -allcostX            \
            -input anat_final.$subj+tlrc |& tee out.allcostX.txt

# ================================== mask ==================================
# create 'full_mask' dataset (union mask)
foreach run ( $runs )
    3dAutomask -dilate 4 -prefix rm.mask_r$run pb04.$subj.r$run.volreg+tlrc
end

# create union of inputs, output type is byte
3dmask_tool -inputs rm.mask_r*+tlrc.HEAD -union -prefix full_mask.$subj

# ---- create subject anatomy mask, mask_anat.$subj+tlrc ----
#      (resampled from tlrc anat)
3dresample -master full_mask.$subj+tlrc -input anatQQ.20170223_0434+tlrc \
           -prefix rm.resam.anat

# convert to binary anat mask; fill gaps and holes
3dmask_tool -dilate_input 5 -5 -fill_holes -input rm.resam.anat+tlrc     \
            -prefix mask_anat.$subj

# compute tighter EPI mask by intersecting with anat mask
3dmask_tool -input full_mask.$subj+tlrc mask_anat.$subj+tlrc             \
            -inter -prefix mask_epi_anat.$subj

# compute overlaps between anat and EPI masks
3dABoverlap -no_automask full_mask.$subj+tlrc mask_anat.$subj+tlrc       \
            |& tee out.mask_ae_overlap.txt

# note Dice coefficient of masks, as well
3ddot -dodice full_mask.$subj+tlrc mask_anat.$subj+tlrc                  \
      |& tee out.mask_ae_dice.txt

# ---- create group anatomy mask, mask_group+tlrc ----
#      (resampled from tlrc base anat, TT_N27_SSW.nii.gz)
3dresample -master full_mask.$subj+tlrc -prefix ./rm.resam.group         \
           -input                                                        \
           /usr/local/apps/afni/current/linux_centos_7_64/TT_N27_SSW.nii.gz'[0]'

# convert to binary group mask; fill gaps and holes
3dmask_tool -dilate_input 5 -5 -fill_holes -input rm.resam.group+tlrc    \
            -prefix mask_group

# note Dice coefficient of anat and template masks
3ddot -dodice mask_anat.$subj+tlrc mask_group+tlrc                       \
      |& tee out.mask_at_dice.txt

# ---- segment anatomy into classes CSF/GM/WM ----
3dSeg -anat anat_final.$subj+tlrc -mask AUTO -classes 'CSF ; GM ; WM'

# copy resulting Classes dataset to current directory
3dcopy Segsy/Classes+tlrc .

# make individual ROI masks for regression (CSF GM WM and CSFe GMe WMe)
foreach class ( CSF GM WM )
   # unitize and resample individual class mask from composite
   3dmask_tool -input Segsy/Classes+tlrc"<$class>"                       \
               -prefix rm.mask_${class}
   3dresample -master pb04.$subj.r01.volreg+tlrc -rmode NN               \
              -input rm.mask_${class}+tlrc -prefix mask_${class}_resam
   # also, generate eroded masks
   3dmask_tool -input Segsy/Classes+tlrc"<$class>" -dilate_input -1      \
               -prefix rm.mask_${class}e
   3dresample -master pb04.$subj.r01.volreg+tlrc -rmode NN               \
              -input rm.mask_${class}e+tlrc -prefix mask_${class}e_resam
end

# ================================ regress =================================

# compute de-meaned motion parameters (for use in regression)
1d_tool.py -infile dfile_rall.1D -set_nruns 1                           \
           -demean -write motion_demean.1D

# compute motion parameter derivatives (for use in regression)
1d_tool.py -infile dfile_rall.1D -set_nruns 1                           \
           -derivative -demean -write motion_deriv.1D

# convert motion parameters for per-run regression
1d_tool.py -infile motion_demean.1D -set_nruns 1                        \
           -split_into_pad_runs mot_demean

1d_tool.py -infile motion_deriv.1D -set_nruns 1                         \
           -split_into_pad_runs mot_deriv

# create censor file motion_${subj}_censor.1D, for censoring motion 
1d_tool.py -infile dfile_rall.1D -set_nruns 1                           \
    -show_censor_count -censor_prev_TR                                  \
    -censor_first_trs 3                                                 \
    -censor_motion 0.3 motion_${subj}

# combine multiple censor files
1deval -a motion_${subj}_censor.1D -b censor_${subj}_combined_2.1D      \
       -expr "a*b" > censor_${subj}_combined_3.1D

# note TRs that were not censored
set ktrs = `1d_tool.py -infile censor_${subj}_combined_3.1D             \
                       -show_trs_uncensored encoded`

# ------------------------------
# run the regression analysis
3dDeconvolve -input pb04.$subj.r*.volreg+tlrc.HEAD                      \
    -mask full_mask.$subj+tlrc                                          \
    -censor censor_${subj}_combined_3.1D                                \
    -ortvec mot_demean.r01.1D mot_demean_r01                            \
    -ortvec mot_deriv.r01.1D mot_deriv_r01                              \
    -polort 51                                                          \
    -num_stimts 0                                                       \
    -jobs 32                                                            \
    -GOFORIT 0                                                          \
    -fout -tout -x1D X.xmat.1D -xjpeg X.jpg                             \
    -x1D_uncensored X.nocensor.xmat.1D                                  \
    -errts errts.${subj}                                                \
    -x1D_stop                                                           \
    -bucket stats.$subj

# -- use 3dTproject to project out regression matrix --
#    (make errts like 3dDeconvolve, but more quickly)
3dTproject -polort 0 -input pb04.$subj.r*.volreg+tlrc.HEAD              \
           -mask full_mask.$subj+tlrc                                   \
           -censor censor_${subj}_combined_3.1D -cenmode ZERO           \
           -ort X.nocensor.xmat.1D -prefix errts.${subj}.tproject



# if 3dDeconvolve fails, terminate the script
if ( $status != 0 ) then
    echo '---------------------------------------'
    echo '** 3dDeconvolve error, failing...'
    echo '   (consider the file 3dDeconvolve.err)'
    exit
endif


# display any large pairwise correlations from the X-matrix
1d_tool.py -show_cormat_warnings -infile X.xmat.1D |& tee out.cormat_warn.txt

# display degrees of freedom info from X-matrix
1d_tool.py -show_df_info -infile X.xmat.1D |& tee out.df_info.txt

# create an all_runs dataset to match the fitts, errts, etc.
3dTcat -prefix all_runs.$subj pb04.$subj.r*.volreg+tlrc.HEAD

# --------------------------------------------------
# create a temporal signal to noise ratio dataset 
#    signal: if 'scale' block, mean should be 100
#    noise : compute standard deviation of errts
3dTstat -mean -prefix rm.signal.all all_runs.$subj+tlrc"[$ktrs]"
3dTstat -stdev -prefix rm.noise.all errts.${subj}.tproject+tlrc"[$ktrs]"
3dcalc -a rm.signal.all+tlrc                                            \
       -b rm.noise.all+tlrc                                             \
       -expr 'a/b' -prefix TSNR.$subj

# ---------------------------------------------------
# compute and store GCOR (global correlation average)
# (sum of squares of global mean of unit errts)
3dTnorm -norm2 -prefix rm.errts.unit errts.${subj}.tproject+tlrc
3dmaskave -quiet -mask full_mask.$subj+tlrc rm.errts.unit+tlrc          \
          > mean.errts.unit.1D
3dTstat -sos -prefix - mean.errts.unit.1D\' > out.gcor.1D
echo "-- GCOR = `cat out.gcor.1D`"

# ---------------------------------------------------
# compute correlation volume
# (per voxel: correlation with masked brain average)
3dmaskave -quiet -mask full_mask.$subj+tlrc errts.${subj}.tproject+tlrc \
          > mean.errts.1D
3dTcorr1D -prefix corr_brain errts.${subj}.tproject+tlrc mean.errts.1D

# --------------------------------------------------
# compute sum of baseline (all) regressors
3dTstat -sum -prefix sum_baseline.1D X.nocensor.xmat.1D

# ================== auto block: generate review scripts ===================

# generate a review script for the unprocessed EPI data
gen_epi_review.py -script @epi_review.$subj      \
    -dsets pb00.$subj.r*.tcat+orig.HEAD

# generate scripts to review single subject results
# (try with defaults, but do not allow bad exit status)
gen_ss_review_scripts.py -exit0                  \
    -mot_limit 0.3 -out_limit 0.05               \
    -errts_dset errts.${subj}.tproject+tlrc.HEAD \
    -mask_dset full_mask.$subj+tlrc.HEAD         \
    -ss_review_dset out.ss_review.$subj.txt      \
    -write_uvars_json out.ss_review_uvars.json

# ========================== auto block: finalize ==========================

# if the basic subject review script is here, run it
# (want this to be the last text output)
if ( -e @ss_review_basic ) then
    ./@ss_review_basic |& tee out.ss_review.$subj.txt

    # generate html ss review pages
    # (akin to static images from running @ss_review_driver)
    apqc_make_tcsh.py -review_style pythonic -subj_dir . \
        -uvar_json out.ss_review_uvars.json
    tcsh @ss_review_html |& tee out.review_html
    apqc_make_html.py -qc_dir QC_$subj

    echo "\nconsider running: \n\n    afni_open -b $subj.results/QC_$subj/index.html\n"
endif

# return to parent directory (just in case...)
cd ..

echo "execution finished: `date`"




# ==========================================================================
# script generated by the command:
#
# afni_proc.py -blocks despike ricor tshift align tlrc volreg mask regress   \
#     -subj_id 20170223_0434 -dsets Epi.nii -align_unifize_epi yes           \
#     -align_opts_aea -cost lpc+ZZ -ginormous_move -deoblique on -check_flip \
#     -volreg_align_to MIN_OUTLIER -volreg_align_e2a -volreg_warp_dxyz 2.0   \
#     -volreg_no_extent_mask -mask_apply epi -mask_segment_anat yes          \
#     -mask_segment_erode yes -regress_no_fitts -html_review_style pythonic  \
#     -keep_rm_files -tshift_align_to -tzero 1.5 -tshift_opts_ts -tpattern   \
#     alt+z2 -ricor_regs RicRegs.1D -ricor_regress_method per-run -copy_anat \
#     ./anat_warp/anatSS.20170223_0434.nii -anat_has_skull no                \
#     -volreg_tlrc_warp -tlrc_base                                           \
#     /usr/local/apps/afni/current/linux_centos_7_64/TT_N27_SSW.nii.gz       \
#     -tlrc_NL_warp -tlrc_NL_warped_dsets anat_warp/anatQQ.20170223_0434.nii \
#     anat_warp/anatQQ.20170223_0434.aff12.1D                                \
#     anat_warp/anatQQ.20170223_0434_WARP.nii -regress_censor_first_trs 3    \
#     -regress_motion_per_run -regress_censor_motion 0.3                     \
#     -regress_censor_outliers 0.05 -regress_apply_mot_types demean deriv    \
#     -regress_opts_3dD -jobs 32 -GOFORIT 0 -regress_censor_extern           \
#     RicRegs_censor.1D -volreg_zpad 2 -mask_dilate 4 -execute
